# Multi-stage Docker build for production deployment
FROM golang:alpine AS builder

# Install build dependencies and update packages
RUN apk update && apk upgrade && apk add --no-cache git gcc musl-dev sqlite-dev

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build optimized binary
RUN CGO_ENABLED=1 GOOS=linux go build \
    -ldflags="-w -s -extldflags '-static'" \
    -o sauron main.go

# Production stage
FROM alpine:latest

# Update and upgrade packages, then install runtime dependencies
RUN apk update && apk upgrade && apk add --no-cache \
    ca-certificates \
    curl \
    sqlite \
    redis \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN adduser -D -s /bin/sh sauron

# Create application directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /app/sauron /usr/local/bin/sauron
RUN chmod +x /usr/local/bin/sauron

# Copy required files
COPY --chown=sauron:sauron geo/ ./geo/
COPY --chown=sauron:sauron data/ ./data/
COPY --chown=sauron:sauron config/ ./config/

# Create directories
RUN mkdir -p /app/tls/certs /app/logs && \
    chown -R sauron:sauron /app

# Install acme.sh for SSL certificates
RUN curl https://get.acme.sh | sh && \
    ln -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh

# Expose ports
EXPOSE 80 443 53/udp 53/tcp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Switch to non-root user
USER sauron

# Start command
CMD ["/usr/local/bin/sauron"]
