version: '3.8'

services:
  sauron-pro:
    image: sauron-proxy:latest
    container_name: sauron-pro-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "53:53/udp"
      - "53:53/tcp"
    environment:
      - SAURON_DOMAIN=${SAURON_DOMAIN}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - TURNSTILE_SECRET=${TURNSTILE_SECRET}
      - LICENSE_TOKEN_SECRET=${LICENSE_TOKEN_SECRET}
      - DEV_MODE=${DEV_MODE:-false}
      - STAGING=${STAGING:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./tls:/app/tls
      - ./logs:/app/logs
      - ./config.db:/app/config.db
      - acme_data:/root/.acme.sh
    networks:
      - sauron-pro-network
    depends_on:
      - redis
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: sauron-pro-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sauron_redis_2024}
    volumes:
      - redis_data:/data
    networks:
      - sauron-pro-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sauron-pro-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sauron-pro-network
    profiles:
      - monitoring

  # Optional: Log aggregation
  grafana:
    image: grafana/grafana:latest
    container_name: sauron-pro-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sauron-pro-network
    profiles:
      - monitoring

volumes:
  redis_data:
  acme_data:
  prometheus_data:
  grafana_data:

networks:
  sauron-pro-network:
    driver: bridge